What is Event Loop
What is Promise
What is Settimeout

---------------------------------------------------------------
" What is Function Prototype
Ans:  
<script>
function Person(first, last, age, eye) {
  this.firstName = first;
  this.lastName = last;
  this.age = age;
  this.eyeColor = eye;
}

Person.prototype.nationality = "English";

var myFather = new Person("John", "Doe", 50, "blue");
document.getElementById("demo").innerHTML =
"The nationality of my father is " + myFather.nationality; 
</script>
result - The nationality of my father is English
<script>
function Person(first, last, age, eye) {
  this.firstName = first;
  this.lastName = last;
  this.age = age;
  this.eyeColor = eye;
}

Person.nationality = "English";

var myFather = new Person("John", "Doe", 50, "blue");
document.getElementById("demo").innerHTML =
"The nationality of my father is " + myFather.nationality; 
</script>
result - The nationality of my father is undefined
"
Conclusion -> The JavaScript prototype property also allows us to add new methods to objects constructors:
--------------------------------------------------------------------------
What is Clousre
How to differentiate between Object and Array
How to Aysnc Process work
Mutilthreding based
Question based on Multiple set time out
 Event Emitter
 Event loop
 call apply bind
 immediate invoked 
 destructing
 spread operator
 object add
 use strict
 try catch
 ---------------------------------
What is Call Apply and Bind?
let name = {
    firstname : "shubham",
    lastname : "jindal",
    printfullname :function(place , country , method){
        console.log(this.firstname + " " + this.lastname + " " + place + " " + country + " using " + method); 
    }
}
name.printfullname("agra" ,"india" ,"call");

let name2 = {
    firstname : "shubham1",
    lastname : "jindal1",
}
 //function borrowing 
name.printfullname.call(name2 , "jaipur",  "india" , "call");
// in bind we pass individual parameter
name.printfullname.apply(name2 , ["jaipur",  "india" , "apply"]);
// in apply we pass second parameter as array
copyofMethod = name.printfullname.bind(name2 , "jaipur",  "india" , "bind");
// bind is using for copy of function for later use
console.log(copyofMethod);
copyofMethod();

//---------------------------//
console.log("after comment start");
let name3 = {
    firstname : "shubham after comment",
    lastname : "jindal after comment",
}
printfullname2  = function(place , country , method){
        console.log(this.firstname + " " + this.lastname + " " + place + " " + country + " using " + method); 
    }
printfullname2.call(name3, "agra" ,"india" ,"call");

let name4 = {
    firstname : "shubham1 after comment",
    lastname : "jindal1 after comment",
}
 //function borrowing 
printfullname2.call(name4 , "jaipur",  "india" , "call");
printfullname2.apply(name4 , ["jaipur",  "india" , "apply"]);

copyofMethod = printfullname2.bind(name4 , "jaipur",  "india" , "bind");
console.log(copyofMethod);
copyofMethod();
--------------------------------
Function Currying - 
// Function Currying

let multiply = function (x,y) {
    console.log(x*y);
}

let multiplybytwo = multiply.bind(this, 2);
multiplybytwo(5);

let multiplybytwo2 = multiply.bind(this, 2 ,9);
multiplybytwo2(5);

let multiplybythree = multiply.bind(this, 3);
multiplybythree(5);

// function currying with clousre

let multiplyClousre = function (x) {
    return function(y) {
        console.log(x*y)
    }
}

let multiplybytwoClousre = multiplyClousre(2);
multiplybytwoClousre(5);

let multiplybytwo2Clousre =multiplyClousre(2 ,9);
multiplybytwo2Clousre(5);

let multiplybythreeClousre =multiplyClousre(3);
multiplybythreeClousre(5);
--------------------------------------------------------------------
What is Event Capturing and Bubbling
<!DOCTYPE html>
<html lang="en" dir="ltr">
  <head>
    <meta charset="utf-8">
    <title></title>
    <style media="screen">
      div{
        min-width : 100px;
        min-height : 100px;
        padding : 40px;
        border : 1px solid black;
      }
    </style>
  </head>
  <body>
    <div id = "grandparentbubbling">
      <div id = "parentbubbling">
        <div id = "childbubbling">
        </div>
      </div>
    </div>
    <div id = "grandparentcapturing">
      <div id = "parentcapturing">
        <div id = "childcapturing">
        </div>
      </div>
    </div>
    <script type="text/javascript">
      document.querySelector("#grandparentbubbling").addEventListener("click", ()=>{
        console.log('hi grandparent bubbling');
      }, false);
      document.querySelector("#parentbubbling").addEventListener('click' , ()=>{
        console.log('hi parent bubbling');
      }, false);
      document.querySelector("#childbubbling").addEventListener('click' , ()=>{
        console.log('hi child bubbling');
      }, false)

      document.querySelector("#grandparentcapturing").addEventListener("click", ()=>{
        console.log('hi grandparent capturing');
      }, true);
      document.querySelector("#parentcapturing").addEventListener('click' , (e)=>{
        e.stopPropagation();
        console.log('hi parent capturing');
      }, true);
      document.querySelector("#childcapturing").addEventListener('click' , ()=>{
        console.log('hi child capturing');
      }, true)
      //stopPropagation concept

    </script>
  </body>
</html>
------------------------------------
What is Event Delegation
<!DOCTYPE html>
<html lang="en" dir="ltr">
  <head>
    <meta charset="utf-8">
    <title></title>
    <style media="screen">
      div{
        min-width : 100px;
        min-height : 100px;
        padding : 40px;
        border : 1px solid black;
      }
    </style>
  </head>
  <body>
    <div>
      <ul id="categories">
        <li id="laptops">laptops</li>
        <li id="phone">phone</li>
        <li id="charger">charger</li>
      </ul>
    </div>
    <script type="text/javascript">
      document.querySelector("#categories").addEventListener("click" , (e)=>{
        if(e.target.tagName==="LI"){
           console.log(e.target.id);
        }
      });
    </script>
  </body>
</html>
------------------------------------------------------------------
